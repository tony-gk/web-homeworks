package ru.itmo.wp.model.repository.impl;

import com.google.common.collect.Iterables;
import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Entity;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.Date;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;

public abstract class AbstractRepository<T extends Entity> {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    protected abstract T toThis(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;

    protected abstract String getEntityName();

    public void save(T entity, List<Map.Entry<String, Object>> parameters) {

        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(getSaveStatement(parameters), Statement.RETURN_GENERATED_KEYS)) {
                setStatementParams(statement, parameters.stream().map(Map.Entry::getValue).collect(Collectors.toList()));
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + getEntityName() + ".");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        entity.setId(generatedKeys.getLong(1));
                    } else {
                        throw new RepositoryException("Can't save " + getEntityName() + "[no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + getEntityName() + ".", e);
        }
    }


    private String getSaveStatement(List<Map.Entry<String, Object>> paramNames) {
        StringBuilder statementSb = new StringBuilder(String.format("INSERT INTO `%s` (", getEntityName()));
        for (Map.Entry<String, Object> name : paramNames) {
            statementSb.append(String.format("`%s`, ", name.getKey()));
        }
        statementSb.append("`creationTime`) VALUES (");
        for (int i = 0; i < paramNames.size(); i++) {
            statementSb.append("?, ");
        }
        statementSb.append("NOW())");
        return statementSb.toString();
    }


    public T find(String statementString, List<Object> parameters) {
        return Iterables.getFirst(findAll(statementString, parameters), null);
    }

    public List<T> findAll(String statementString) {
        return findAll(statementString, new ArrayList<>());
    }

    public List<T> findAll(String statementString, List<Object> parameters) {
        List<T> entities = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(statementString)) {
                    setStatementParams(statement, parameters);
                try (ResultSet resultSet = statement.executeQuery()) {
                    T entity;
                    while ((entity = toThis(statement.getMetaData(), resultSet)) != null) {
                        entities.add(entity);
                    }
                    return entities;
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getEntityName() + " by id.", e);
        }
    }


    public void update(String statementString, List<Object> parameters) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(statementString)) {
                setStatementParams(statement, parameters);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't update " + getEntityName() + ".");
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't update" + getEntityName() + ".", e);
        }
    }

    public Long findCount() {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT COUNT(*) FROM " + getEntityName())) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    resultSet.next();
                    return resultSet.getLong(1);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getEntityName() + " count.", e);
        }
    }

    private void setStatementParams(PreparedStatement statement, List<Object> params) throws SQLException {
        for (int i = 1; i <= params.size(); ++i) {
            Object param = params.get(i - 1);
            if (param instanceof String) {
                statement.setString(i, (String) param);
            } else if (param instanceof Long) {
                statement.setLong(i, (Long) param);
            } else if (param instanceof Boolean) {
                statement.setBoolean(i, (Boolean) param);
            } else if (param instanceof Date) {
                statement.setDate(i, (Date) param);
            } else if (param instanceof Enum) {
                statement.setString(i, param.toString());
            } else {
                throw new RepositoryException("Can't set statement parameter");
            }
        }
    }

}
